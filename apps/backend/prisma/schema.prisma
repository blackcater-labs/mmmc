// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/// UltComic
///
/// 超集漫画：是同一漫画的多个版本的集合，比如不同语言的版本，不同翻译组的版本，不同画质的版本等等。
model UltComic {
  id        Int      @id @default(autoincrement())
  ultId     String   @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comics Comic[]

  @@map("ult_comic")
}

/// Comic
///
/// 单个漫画作品：由一系列的章节组成
model Comic {
  id        Int      @id @default(autoincrement())
  comicId   String   @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title          String
  cover          String?
  landscapeCover String?
  summary        String? // HTML
  authors        Author[]
  actors         Actor[]
  tags           Tag[]
  genres         Genre[]
  chapters       Chapter[]
  // zh-CN, en-US, ja-JP, ko-KR
  langCode       String?
  // HD, SD, LD
  qualityCode    String?
  versionName    String?
  // Single, Double, Double(Right-Left), LongStrip
  readingMode    String?
  // Adults, Teenagers, Children, Everyone
  ageRating      String?
  // Finished, Ongoing, Suspended, Canceled
  status         String?
  releasedAt     DateTime? @default(now()) // First release date

  UltComic            UltComic?             @relation(fields: [ultComicId], references: [id])
  ultComicId          Int?
  UserCollectionComic UserCollectionComic[]
  UserReadingHistory  UserReadingHistory[]

  @@map("comic")
}

/// Author
///
/// 漫画各种参与方：比如画家、编剧、上色、翻译、出版社等等
model Author {
  id        Int      @id @default(autoincrement())
  authorId  String   @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  realName String?
  cover    String?
  // Writer, Penciller, Inker, Colorist, Letterer, CoverArtist, Editor, Translator, Publisher
  role     String?

  Comic   Comic? @relation(fields: [comicId], references: [id])
  comicId Int?

  @@map("author")
}

/// Actor
///
/// 漫画角色：主要角色信息
model Actor {
  id        Int      @id @default(autoincrement())
  actorId   String   @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String
  cover String?
  bio   String? // HTML

  Comic   Comic? @relation(fields: [comicId], references: [id])
  comicId Int?

  @@map("actor")
}

/// Tag
///
/// 漫画标签：比如 NTR、GL、BL、全彩、黑白、完结、连载等等
model Tag {
  id        Int      @id @default(autoincrement())
  tagId     String   @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name           String
  cover          String?
  landscapeCover String?
  i18n           String? @default("{}") // JSON

  Comic   Comic? @relation(fields: [comicId], references: [id])
  comicId Int?

  @@map("tag")
}

/// Genre
///
/// 漫画分类：比如恋爱、恐怖、科幻、搞笑、日常等等
model Genre {
  id        Int      @id @default(autoincrement())
  genreId   String   @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name           String
  cover          String?
  landscapeCover String?
  i18n           String? @default("{}") // JSON

  Comic   Comic? @relation(fields: [comicId], references: [id])
  comicId Int?

  @@map("genre")
}

/// Chapter
///
/// 漫画章节：由一系列的图片组成
model Chapter {
  id        Int      @id @default(autoincrement())
  chapterId String   @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title     String?
  no        Int?
  // Preview, Story, SideStory, Announcement, Advertisement
  type      String?
  cover     String?
  pageCount Int?
  path      String?
  pages     Page[]

  Comic              Comic?               @relation(fields: [comicId], references: [id])
  comicId            Int?
  UserReadingHistory UserReadingHistory[]

  @@map("chapter")
}

/// Page
///
/// 漫画图片：一张图片
model Page {
  id        Int      @id @default(autoincrement())
  pageId    String   @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  path        String
  no          Int?
  // Cover, Advertisement, Preview, Roundup, Story
  type        String?
  // PNG, JPG, JPEG, WEBP, GIF
  ext         String?
  imageSize   Int?
  imageWidth  Int?
  imageHeight Int?

  Chapter   Chapter? @relation(fields: [chapterId], references: [id])
  chapterId Int?

  @@map("page")
}

// --------------------------------------------------------------------------

/// User
///
/// 用户：注册用户
model User {
  id        Int      @id @default(autoincrement())
  userId    String   @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username         String               @unique
  password         String
  email            String               @unique
  nickname         String?
  avatar           String?
  bio              String? // HTML
  role             String?              @default("User") // Admin, User
  readingHistories UserReadingHistory[]
  collections      UserCollection[]

  @@map("user")
}

model UserReadingHistory {
  id        Int      @id @default(autoincrement())
  historyId String   @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comicId   Int
  comic     Comic   @relation(fields: [comicId], references: [id])
  chapterId Int
  chapter   Chapter @relation(fields: [chapterId], references: [id])

  User   User? @relation(fields: [userId], references: [id])
  userId Int?

  @@map("user_reading_history")
}

model UserCollection {
  id           Int      @id @default(autoincrement())
  collectionId String   @unique @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  name  String
  comic UserCollectionComic[]

  User   User? @relation(fields: [userId], references: [id])
  userId Int?

  @@map("user_collection")
}

model UserCollectionComic {
  id                    Int      @id @default(autoincrement())
  userCollectionComicId String   @unique @default(cuid())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  comicId Int
  comic   Comic @relation(fields: [comicId], references: [id])

  UserCollection   UserCollection? @relation(fields: [userCollectionId], references: [id])
  userCollectionId Int?

  @@map("user_collection_comic")
}
