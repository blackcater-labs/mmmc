generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  password  String
  role      Int?      @default(2) // 1: admin, 2: user
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  spaces       Space[] // created
  spaceUsers   SpaceUser[] // viewer
  libraries    Library[] // created
  libraryUsers LibraryUser[] // viewer
  playlists    Playlist[] // created

  @@map("users")
}

model Space {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int // owner
  name      String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  libraries    Library[]
  spaceUsers   SpaceUser[]
  libraryUsers LibraryUser[]

  @@unique([userId, name])
  @@index([userId])
  @@map("spaces")
}

model SpaceUser {
  id        Int       @id @default(autoincrement())
  space     Space     @relation(fields: [spaceId], references: [id])
  spaceId   Int
  user      User      @relation(fields: [userId], references: [id])
  userId    Int // viewer
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([spaceId, userId])
  @@index([spaceId])
  @@index([userId])
  @@map("space_users")
}

model Library {
  id        Int       @id @default(autoincrement())
  space     Space     @relation(fields: [spaceId], references: [id])
  spaceId   Int // owner
  user      User      @relation(fields: [userId], references: [id])
  userId    Int // owner
  name      String
  type      Int // 1. comic, 2. novel, 3. pdf
  dir       String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  items        Item[]
  libraryUsers LibraryUser[]

  @@unique([spaceId, dir])
  @@index([userId])
  @@index([spaceId])
  @@map("libraries")
}

model LibraryUser {
  id        Int       @id @default(autoincrement())
  space     Space     @relation(fields: [spaceId], references: [id])
  spaceId   Int
  library   Library   @relation(fields: [libraryId], references: [id])
  libraryId Int
  user      User      @relation(fields: [userId], references: [id])
  userId    Int // viewer
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([spaceId, libraryId, userId])
  @@index([spaceId, libraryId])
  @@index([spaceId, userId])
  @@index([libraryId])
  @@index([userId])
  @@map("library_users")
}

model Playlist {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int // owner
  name      String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([userId, name])
  @@map("playlists")
}

model Item {
  id               Int       @id @default(autoincrement())
  library          Library   @relation(fields: [libraryId], references: [id])
  libraryId        Int
  name             String
  type             Int // 1. comic, 2. novel, 3. pdf, 4. archive, 5. series
  dir              String
  title            String
  description      String?
  tagline          String?
  thumb_url        String?
  tag_producer     String?
  tag_publisher    String?
  tag_director     String?
  tag_actor        String?
  identifier       String?
  release_year     Int?
  release_date     DateTime?
  rating           Float?
  ratingType       Int? // 1. views, 2. stars, 3. hearts, 4. likes, 5. dislikes, 6. comments, 7. downloads, 8. bookmarks, 9. follows, 10. votes, 11. ten-grade, 12. five-grade
  ratingCount      Int?
  contentRating    String?
  contentRatingAge Int?
  country          String?
  readingDirection Int? // 1. vertical, 2. one-page-ltr, 3. one-page-rtl, 4. two-page-ltr, 5. two-page-rtl
  extra            String?
  status           Int? // 1. ongoing, 2. completed, 3. dropped, 4. paused
  createdAt        DateTime? @default(now())
  updatedAt        DateTime? @updatedAt

  chapters           Chapter[]
  itemTags           ItemTag[]
  itemRelations      ItemRelation[] @relation("relatedItems")
  childItemRelations ItemRelation[] @relation("relatedChildItems")

  @@unique([libraryId, dir])
  @@map("items")
}

model ItemRelation {
  id           Int       @id @default(autoincrement())
  parentItem   Item      @relation("relatedItems", fields: [parentItemId], references: [id])
  parentItemId Int
  item         Item      @relation("relatedChildItems", fields: [itemId], references: [id])
  itemId       Int
  type         Int // 1. belongs
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt

  @@unique([parentItemId, itemId])
  @@index([parentItemId])
  @@index([itemId])
  @@map("item_relations")
}

model Tag {
  id        Int       @id @default(autoincrement())
  parent    Tag?      @relation("subTags", fields: [parentId], references: [id])
  parentId  Int?
  children  Tag[]     @relation("subTags")
  name      String
  type      Int // 1. genre, 2. tag, 3. producer, 4. publisher, 5. director, 6. author, 7. artist, 8. writer, 9. editor, 10. painter, 11. actor, 12. character, 13. year, 14. contentRating, 15. country
  thumb_url String?
  extra     String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  itemTags ItemTag[]

  @@index([parentId])
  @@map("tags")
}

model ItemTag {
  id        Int       @id @default(autoincrement())
  item      Item      @relation(fields: [itemId], references: [id])
  itemId    Int
  tag       Tag       @relation(fields: [tagId], references: [id])
  tagId     Int
  index     Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([itemId, tagId])
  @@index([itemId])
  @@index([tagId])
  @@map("item_tags")
}

model Chapter {
  id           Int       @id @default(autoincrement())
  item         Item      @relation(fields: [itemId], references: [id])
  itemId       Int
  name         String
  dir          String?
  thumb_url    String?
  offset       Int?
  release_year Int?
  release_date DateTime?
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt

  @@index([itemId])
  @@map("chapters")
}
